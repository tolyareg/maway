from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
import telegram.error, asyncio, re, random

# region: authorize
TOKEN = "7586702932:AAGVWtuX7b7Eo2XnSo9WlxrqYNXy2rkMw2s"
TARGET_CHANNEL_ID = -1002447905522
# endregion

# region: FAQ question and answer
FAQ_RESPONSES = {
    "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã": f"–í–æ–ø—Ä–æ—Å: üíº –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã\n\n–ö–æ–º–ø–∞–Ω–∏—è MAWAY Travel –æ–∫–∞–∑—ã–≤–∞–µ—Ç —É—Å–ª—É–≥–∏ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—é –¥–µ–ª–æ–≤—ã—Ö –ø–æ–µ–∑–¥–æ–∫. –ú—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –Ω–∞–¥–µ–∂–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –∑–∞–±–æ—Ç–∏–º—Å—è –æ –∫–æ–º—Ñ–æ—Ä—Ç–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤–æ –≤—Ä–µ–º—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π, –ø–æ–º–æ–≥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –¥–µ–ª–æ–≤—ã–µ –ø–æ–µ–∑–¥–∫–∏ –∏ –≤—ã–µ–∑–¥–Ω—ã–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.",
    "–ö–æ–≥–¥–∞ –∏ –∫–∞–∫ —è –ø–æ–ª—É—á—É –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ —Ç—É—Ä": f"–í–æ–ø—Ä–æ—Å: üìÖ –ö–æ–≥–¥–∞ –∏ –∫–∞–∫ —è –ø–æ–ª—É—á—É –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ —Ç—É—Ä\n\n–ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –≤–∞—à —Ç—É—Ä –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω ‚Äì –≤–∞–º –Ω–∞ –ø–æ—á—Ç—É –ø—Ä–∏–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ . –ü–µ—Ä–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ, –∫–æ–≥–¥–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–∞–µ—Ç–µ —Ç—É—Ä ‚Äì —ç—Ç–æ –¥–æ–≥–æ–≤–æ—Ä, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–æ–ø–∏—Å–∞–Ω—ã –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—É—Ä–∞ (–ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è), –∞ —Ç–∞–∫–∂–µ –ø–æ—Ä—è–¥–æ–∫ –≤–∑–∞–∏–º–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π –º–µ–∂–¥—É —Ç—É—Ä–∏—Å—Ç–æ–º –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º. –í —Å–ª—É—á–∞–µ, –∫–æ–≥–¥–∞ –ø–æ–¥–±–æ—Ä —Ç—É—Ä–∞ –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ–Ω-–ª–∞–π–Ω, –¥–æ–≥–æ–≤–æ—Ä –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ —Ñ–∞–∫—Ç—É –≤–Ω–µ—Å–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∑–∞ —Ç—É—Ä –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –ø–æ –∑–∞–ø—Ä–æ—Å—É —Ç—É—Ä–∏—Å—Ç–∞.\n2. –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –ø–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–µ–∑–¥–∫–∏: —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –±–∏–ª–µ—Ç, –≤–∞—É—á–µ—Ä –Ω–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–µ –∏ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä, –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –≤–∏–∑—ã (–≤ —Å–ª—É—á–∞–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏), –¥–µ—Ç–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É —Å —Ç–∞–π–º–∏–Ω–≥–æ–º –≤ —Ç–µ—á–µ–Ω–∏–µ —Ç—Ä–µ—Ö –¥–Ω–µ–π –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–π –æ–ø–ª–∞—Ç—ã –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è (–Ω–µ –ø–æ–∑–¥–Ω–µ–µ, —á–µ–º –∑–∞ 30 –¥–Ω–µ–π –¥–æ –Ω–∞—á–∞–ª–∞ –æ—Ç–¥—ã—Ö–∞)",
    "–í–æ–∑–º–æ–∂–Ω–æ –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã —Ç—É—Ä–∞": f"–í–æ–ø—Ä–æ—Å: üí∞ –í–æ–∑–º–æ–∂–Ω–æ –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã —Ç—É—Ä–∞\n\n–î–∞, –≤ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω–æ–π —á–∞—Å—Ç–∏ —Ç—É—Ä–∞",
    "–ú–æ–≥—É –ª–∏ —è –æ—Ç–º–µ–Ω–∏—Ç—å —Ç—É—Ä –∏ –∫–∞–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–æ–∑–≤—Ä–∞—Ç –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤": f"–í–æ–ø—Ä–æ—Å: üìù –ú–æ–≥—É –ª–∏ —è –æ—Ç–º–µ–Ω–∏—Ç—å —Ç—É—Ä\n\n–î–∞, –ø–æ–¥—Ä–æ–±–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é —É–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≤ –¥–æ–≥–æ–≤–æ—Ä–µ",
    "–ó–∞—â–∏—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö": f"–í–æ–ø—Ä–æ—Å: üîí –ó–∞—â–∏—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n\n–í —Ü–µ–ª—è—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–Ω—ã—Ö –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ —Ç—É—Ä–∞ –Ω–∞–º –º–æ–≥—É—Ç –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è –≤–∞—à–∏ –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∞ —Ç–∞–∫–∂–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–∏—Ö –¥–∏–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö –∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ö.\n–í —ç—Ç–∏—Ö —Ä–∞–º–∫–∞—Ö –∑–∞—â–∏—Ç–∞ –í–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —è–≤–ª—è–µ—Ç—Å—è –æ—Å–Ω–æ–≤–æ–ø–æ–ª–∞–≥–∞—é—â–µ–π –∑–∞–¥–∞—á–µ–π –∫–æ–º–ø–∞–Ω–∏–∏",
}
# endregion

# navigation through the context menu
DIRECTION_NAMES = {
    "0": "üèñÔ∏è –ü–ª—è–∂–Ω—ã–π –æ—Ç–¥—ã—Ö",
    "1": "üèîÔ∏è –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –≤ –≥–æ—Ä–∞—Ö",
    "2": "üö¢ –ö—Ä—É–∏–∑—ã",
    "3": "üèõÔ∏è –≠–∫—Å–∫—É—Ä—Å–∏–æ–Ω–Ω—ã–µ —Ç—É—Ä—ã",
    "4": "üá∑üá∫ –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –ø–æ –†–æ—Å—Å–∏–∏",
    "5": "üéÅ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å —Ä–∞–Ω–Ω–∏–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º",
    "6": "üî• –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –≥–æ—Ä—è—â–∏–º–∏ —Ç—É—Ä–∞–º–∏",
}

VISA_NAMES = {
    "0": "üá∫üá∏üá¨üáß –°–®–ê –∏ –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è",
    "1": "üá™üá∫ –®–µ–Ω–≥–µ–Ω",
    "2": "üáÆüá≥üá±üá∞üáªüá≥ –ò–Ω–¥–∏—è, –®—Ä–∏-–õ–∞–Ω–∫–∞, –í—å–µ—Ç–Ω–∞–º",
    "3": "üáßüá¨üá∑üá¥ –ë–æ–ª–≥–∞—Ä–∏—è –∏ –†—É–º—ã–Ω–∏—è",
}
VISA_TEXT = {
    "0": "–í—ã –≤—ã–±—Ä–∞–ª–∏: üá∫üá∏üá¨üáß –°–®–ê –∏ –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è\n\n–°—Ä–æ–∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ 3-5 –¥–Ω–µ–π, —Å—Ä–æ–∫ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è - –æ—Ç 1 –º–µ—Å—è—Ü–∞, —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–∑—É –≤ –¥–µ–Ω—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è, –∏–Ω–æ–≥–¥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ 14 –¥–Ω–µ–π\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–¥–æ–±–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è —Å–≤—è–∑–∏ —Å –≤–∞–º–∏",
    "1": "–í—ã –≤—ã–±—Ä–∞–ª–∏: üá™üá∫ –®–µ–Ω–≥–µ–Ω\n\n–°—Ä–æ–∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ 3-5 –¥–Ω–µ–π, —Å—Ä–æ–∫ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è - –æ—Ç 1 –º–µ—Å—è—Ü–∞, —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–∑—É –≤ –¥–µ–Ω—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è, –∏–Ω–æ–≥–¥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ 14 –¥–Ω–µ–π\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–¥–æ–±–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è —Å–≤—è–∑–∏ —Å –≤–∞–º–∏",
    "2": "–í—ã –≤—ã–±—Ä–∞–ª–∏: üáÆüá≥üá±üá∞üáªüá≥ –ò–Ω–¥–∏—è, –®—Ä–∏-–õ–∞–Ω–∫–∞, –í—å–µ—Ç–Ω–∞–º\n\n–°—Ä–æ–∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ 3-5 –¥–Ω–µ–π, —Å—Ä–æ–∫ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è - –æ—Ç 1 –º–µ—Å—è—Ü–∞, —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–∑—É –≤ –¥–µ–Ω—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è, –∏–Ω–æ–≥–¥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ 14 –¥–Ω–µ–π\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–¥–æ–±–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è —Å–≤—è–∑–∏ —Å –≤–∞–º–∏",
    "3": "–í—ã –≤—ã–±—Ä–∞–ª–∏: üáßüá¨üá∑üá¥ –ë–æ–ª–≥–∞—Ä–∏—è –∏ –†—É–º—ã–Ω–∏—è\n\n–°—Ä–æ–∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ 3-5 –¥–Ω–µ–π, —Å—Ä–æ–∫ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è - –æ—Ç 1 –º–µ—Å—è—Ü–∞, —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–∑—É –≤ –¥–µ–Ω—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è, –∏–Ω–æ–≥–¥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ 14 –¥–Ω–µ–π\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–¥–æ–±–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è —Å–≤—è–∑–∏ —Å –≤–∞–º–∏",
}
# --------------------
# --------------------

# region: showing sections
async def show_direction_options(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton(DIRECTION_NAMES["0"], callback_data="direction_0")],
        [InlineKeyboardButton(DIRECTION_NAMES["1"], callback_data="direction_1")],
        [InlineKeyboardButton(DIRECTION_NAMES["2"], callback_data="direction_2")],
        [InlineKeyboardButton(DIRECTION_NAMES["3"], callback_data="direction_3")],
        [InlineKeyboardButton(DIRECTION_NAMES["4"], callback_data="direction_4")],
        [InlineKeyboardButton(DIRECTION_NAMES["5"], callback_data="direction_5")],
        [InlineKeyboardButton(DIRECTION_NAMES["6"], callback_data="direction_6")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await send_message_or_reply(
        update,
        context,
        "üß≠ –ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏–º—Å—è –Ω–∞ —ç—Ç–æ—Ç —Ä–∞–∑?\nüó∫Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ!",
        reply_markup=reply_markup,
    )


async def show_visa_options(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton(VISA_NAMES["0"], callback_data="visa_0")],
        [InlineKeyboardButton(VISA_NAMES["1"], callback_data="visa_1")],
        [InlineKeyboardButton(VISA_NAMES["2"], callback_data="visa_2")],
        [InlineKeyboardButton(VISA_NAMES["3"], callback_data="visa_3")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await send_message_or_reply(
        update,
        context,
        "üõÇ –ö–∞–∫–∏–µ —Å—Ç—Ä–∞–Ω—ã –∂–¥—É—Ç –≤–∞—Å? üåç\nüîç –í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–∑—É!",
        reply_markup=reply_markup,
    )


# endregion

# --------------------
# --------------------

# region: keyboard data (can be adjusted as needed)
def get_form_keyboard(form_type):
    keyboard = []
    if form_type == "direction":
        keyboard = [
            [InlineKeyboardButton(DIRECTION_NAMES["0"], callback_data="direction_0")],
            [InlineKeyboardButton(DIRECTION_NAMES["1"], callback_data="direction_1")],
            [InlineKeyboardButton(DIRECTION_NAMES["2"], callback_data="direction_2")],
            [InlineKeyboardButton(DIRECTION_NAMES["3"], callback_data="direction_3")],
            [InlineKeyboardButton(DIRECTION_NAMES["4"], callback_data="direction_4")],
            [InlineKeyboardButton(DIRECTION_NAMES["5"], callback_data="direction_5")],
            [InlineKeyboardButton(DIRECTION_NAMES["6"], callback_data="direction_6")],
        ]

    if form_type == "visa":
        keyboard = [
            [InlineKeyboardButton(VISA_NAMES["0"], callback_data="visa_0")],
            [InlineKeyboardButton(VISA_NAMES["1"], callback_data="visa_1")],
            [InlineKeyboardButton(VISA_NAMES["2"], callback_data="visa_2")],
            [InlineKeyboardButton(VISA_NAMES["3"], callback_data="visa_3")],
        ]

    keyboard.append(
        [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back")]
    )
    return InlineKeyboardMarkup(keyboard)


# endregion

# region: menu cache
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    form_index = int(query.data.split("_")[1])

    history = context.user_data.get("history", [])
    history.append(form_index)
    context.user_data["history"] = history
    context.user_data["current_form"] = form_index
    # Reset form_step when going to a new main menu
    context.user_data["form_step"] = None

    if form_index == 0:
        await show_direction_options(update, context)

    elif form_index == 1:
        await show_visa_options(update, context)

    elif form_index == 2:
        await show_faq_options(update, context)


# endregion

# region: validation functions
def find_phone_number(text):
    phone_regex = (
        r"(?<!\S)(?:\+?\d{1,3})?[-.\s]?\(?\d{1,4}\)?[-.\s]?\d{1,3}[-.\s]?\d{1,4}(?!\S)"
    )
    potential_numbers = re.findall(phone_regex, text)

    valid_numbers = [
        num for num in potential_numbers if "@" not in num and len(num) >= 7
    ]
    return valid_numbers[0] if valid_numbers else None


def find_email(text):
    email_pattern = r"[a-zA-Z0-9._%+-]+@[a-zAZ0-9.-]+\.[a-zA-Z]{2,}"
    match = re.search(email_pattern, text)
    return match.group() if match else None


# endregion

# region: Form steps
async def send_message_or_reply(
    update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, reply_markup=None
):
    if update.message:
        await update.message.reply_text(text, reply_markup=reply_markup)
    elif update.callback_query:
        try:
            if (
                update.callback_query.message.text == text
                and update.callback_query.message.reply_markup == reply_markup
            ):
                await update.callback_query.message.reply_text(
                    text, reply_markup=reply_markup
                )
            else:
                await update.callback_query.edit_message_text(
                    text, reply_markup=reply_markup
                )
        except telegram.error.BadRequest as e:
            if "Message to edit not found" in str(e):
                print("Message to edit not found, sending a new message.")
                await update.callback_query.message.reply_text(
                    text, reply_markup=reply_markup
                )
            elif "Query is too old" in str(e):
                print("Query is too old, ignoring.")
            else:
                print(f"An unexpected BadRequest error occurred: {e}")


async def ask_contact_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_message_or_reply(update, context, "–ö–∞–∫ –∫ –≤–∞–º –º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?")
    context.user_data.setdefault("history", []).append("contact_name")


async def ask_contact_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_message_or_reply(
        update, context, "–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, E-mail, –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Ü. —Å–µ—Ç—è—Ö:"
    )
    context.user_data.setdefault("history", []).append("contact_info")


async def ask_contact_method(update: Update, context: ContextTypes.DEFAULT_TYPE):
    current_direction = context.user_data.get("direction_name")

    keyboard = [
        [InlineKeyboardButton("üì± Telegram", callback_data="contact_method_0")],
        [InlineKeyboardButton("üí¨ WhatsApp", callback_data="contact_method_1")],
        [InlineKeyboardButton("üë§ VK", callback_data="contact_method_2")],
        [InlineKeyboardButton("üìß E-Mail", callback_data="contact_method_3")],
        [InlineKeyboardButton("üìû –õ—é–±–æ–π", callback_data="contact_method_4")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if (current_direction == DIRECTION_NAMES["5"]):
        await send_message_or_reply(
            update,
            context,
            "–í—ã –≤—ã–±—Ä–∞–ª–∏: üéÅ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å —Ä–∞–Ω–Ω–∏–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º\n\nüì≤ –ö–∞–∫–æ–π —Å–ø–æ—Å–æ–± –¥–ª—è —Å–≤—è–∑–∏ –≤–∞–º –±–ª–∏–∂–µ?",
            reply_markup=reply_markup,
        )
    elif (current_direction == DIRECTION_NAMES["6"]):
        await send_message_or_reply(
            update,
            context,
            "–í—ã –≤—ã–±—Ä–∞–ª–∏: üî• –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –≥–æ—Ä—è—â–∏–º–∏ —Ç—É—Ä–∞–º–∏\n\nüì≤ –ö–∞–∫–æ–π —Å–ø–æ—Å–æ–± –¥–ª—è —Å–≤—è–∑–∏ –≤–∞–º –±–ª–∏–∂–µ?",
            reply_markup=reply_markup,
        )

    context.user_data.setdefault("history", []).append("contact_method")


async def ask_visa_duration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    visa_name = context.user_data.get("visa_name")
    visa_index = list(VISA_NAMES.values()).index(visa_name)
    text = VISA_TEXT.get(str(visa_index))

    keyboard = [
        [InlineKeyboardButton("üì± Telegram", callback_data="contact_method_0")],
        [InlineKeyboardButton("üí¨ WhatsApp", callback_data="contact_method_1")],
        [InlineKeyboardButton("üë§ VK", callback_data="contact_method_2")],
        [InlineKeyboardButton("üìß E-Mail", callback_data="contact_method_3")],
        [InlineKeyboardButton("üìû –õ—é–±–æ–π", callback_data="contact_method_4")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await send_message_or_reply(update, context, f"{text}", reply_markup=reply_markup)
    context.user_data.setdefault("history", []).append("visa_duration")


async def ask_direction_duration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    current_direction = context.user_data.get("direction_name")
    keyboard = []

    if current_direction == DIRECTION_NAMES["0"]:
        keyboard = [
            [InlineKeyboardButton("üåô –¥–æ 7 –Ω–æ—á–µ–π", callback_data="duration_0")],
            [InlineKeyboardButton("üåôüåô –¥–æ 10 –Ω–æ—á–µ–π", callback_data="duration_1")],
            [InlineKeyboardButton("üåôüåôüåô –¥–æ 14 –Ω–æ—á–µ–π", callback_data="duration_2")],
            [InlineKeyboardButton("üåôüåôüåô+ –æ—Ç 14 –Ω–æ—á–µ–π", callback_data="duration_3")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")],
        ]
    elif current_direction == DIRECTION_NAMES["2"]:
        keyboard = [
            [InlineKeyboardButton("üåôüåô –¥–æ 14 –Ω–æ—á–µ–π", callback_data="duration_2")],
            [InlineKeyboardButton("üåôüåôüåô+ –æ—Ç 14 –Ω–æ—á–µ–π", callback_data="duration_3")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")],
        ]
    elif (
        current_direction == DIRECTION_NAMES["3"]
        or current_direction == DIRECTION_NAMES["4"]
    ):
        keyboard = [
            [InlineKeyboardButton("üèôÔ∏è –¥–æ 3 –Ω–æ—á–µ–π", callback_data="duration_0")],
            [InlineKeyboardButton("üåÜ –¥–æ 7 –Ω–æ—á–µ–π", callback_data="duration_1")],
            [InlineKeyboardButton("üåá –¥–æ 10 –Ω–æ—á–µ–π", callback_data="duration_2")],
            [InlineKeyboardButton("üåÉ –æ—Ç 10 –Ω–æ—á–µ–π", callback_data="duration_3")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")],
        ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    if current_direction == DIRECTION_NAMES["0"]:
        await send_message_or_reply(
            update,
            context,
            "–í—ã –≤—ã–±—Ä–∞–ª–∏: üèñÔ∏è –ü–ª—è–∂–Ω—ã–π –æ—Ç–¥—ã—Ö\n\n‚è≥ –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–¥–µ–ª–∏—Ç—å –Ω–∞ –æ—Ç–¥—ã—Ö?\n‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:",
            reply_markup=reply_markup,
        )
    elif current_direction == DIRECTION_NAMES["2"]:
        await send_message_or_reply(
            update,
            context,
            "–í—ã –≤—ã–±—Ä–∞–ª–∏: üö¢ –ö—Ä—É–∏–∑—ã\n\n‚è≥ –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–¥–µ–ª–∏—Ç—å –Ω–∞ –æ—Ç–¥—ã—Ö?\n‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:",
            reply_markup=reply_markup,
        )
    elif (current_direction == DIRECTION_NAMES["3"]):
        await send_message_or_reply(
            update,
            context,
            "–í—ã –≤—ã–±—Ä–∞–ª–∏: üèõÔ∏è –≠–∫—Å–∫—É—Ä—Å–∏–æ–Ω–Ω—ã–µ —Ç—É—Ä—ã\n\n‚è≥ –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–¥–µ–ª–∏—Ç—å –Ω–∞ –æ—Ç–¥—ã—Ö?\n‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:",
            reply_markup=reply_markup,
        )
    elif (current_direction == DIRECTION_NAMES["4"]):
        await send_message_or_reply(
            update,
            context,
            "–í—ã –≤—ã–±—Ä–∞–ª–∏: üá∑üá∫ –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –ø–æ –†–æ—Å—Å–∏–∏\n\n‚è≥ –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–¥–µ–ª–∏—Ç—å –Ω–∞ –æ—Ç–¥—ã—Ö?\n‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:",
            reply_markup=reply_markup,
        )

    context.user_data.setdefault("history", []).append("direction_duration")


async def ask_direction_participants(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    keyboard = [
        [InlineKeyboardButton("1-2 —á–µ–ª–æ–≤–µ–∫–∞", callback_data="participants_0")],
        [InlineKeyboardButton("–¥–æ 4 —á–µ–ª–æ–≤–µ–∫", callback_data="participants_1")],
        [InlineKeyboardButton("–æ—Ç 4 —á–µ–ª–æ–≤–µ–∫", callback_data="participants_2")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await send_message_or_reply(
        update, context, "–°–æ—Å—Ç–∞–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è:", reply_markup=reply_markup
    )
    context.user_data.setdefault("history", []).append("direction_participants")


async def ask_direction_children(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_message_or_reply(
        update, context, "–ï—Å–ª–∏ –≤—ã –±–µ—Ä–µ—Ç–µ —Å —Å–æ–±–æ–π –¥–µ—Ç–µ–π, —É–∫–∞–∂–∏—Ç–µ –∏—Ö –∫–æ–ª-–≤–æ –∏ –≤–æ–∑—Ä–∞—Å—Ç:"
    )
    context.user_data.setdefault("history", []).append("direction_children")


async def ask_direction_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = []
    current_direction = context.user_data.get("direction_name")
    if (
        current_direction == DIRECTION_NAMES["0"]
        or current_direction == DIRECTION_NAMES["4"]
    ):
        keyboard = [
            [InlineKeyboardButton("–¥–æ 150 000", callback_data="budget_0")],
            [InlineKeyboardButton("–¥–æ 250 000", callback_data="budget_1")],
            [InlineKeyboardButton("–¥–æ 500 000", callback_data="budget_2")],
            [InlineKeyboardButton("–æ—Ç 500 000", callback_data="budget_3")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")],
        ]
    elif current_direction == DIRECTION_NAMES["2"]:
        keyboard = [
            [InlineKeyboardButton("–¥–æ 250 000", callback_data="budget_1")],
            [InlineKeyboardButton("–¥–æ 500 000", callback_data="budget_2")],
            [InlineKeyboardButton("–æ—Ç 500 000", callback_data="budget_3")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")],
        ]
    elif current_direction == DIRECTION_NAMES["3"]:
        keyboard = [
            [InlineKeyboardButton("–¥–æ 100 000", callback_data="budget_0")],
            [InlineKeyboardButton("–¥–æ 200 000", callback_data="budget_1")],
            [InlineKeyboardButton("–¥–æ 400 000", callback_data="budget_2")],
            [InlineKeyboardButton("–æ—Ç 400 000", callback_data="budget_3")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")],
        ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await send_message_or_reply(
        update, context, "–ñ–µ–ª–∞–µ–º—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –±—é–¥–∂–µ—Ç–∞:", reply_markup=reply_markup
    )
    context.user_data.setdefault("history", []).append("direction_budget")


async def ask_direction_travel_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = []
    current_direction = context.user_data.get("direction_name")
    if (
        current_direction == DIRECTION_NAMES["0"]
        or current_direction == DIRECTION_NAMES["3"]
        or current_direction == DIRECTION_NAMES["4"]
    ):
        keyboard = [
            [InlineKeyboardButton("–¥–æ 4 —á–∞—Å–æ–≤", callback_data="travel_time_0")],
            [InlineKeyboardButton("–¥–æ 9 —á–∞—Å–æ–≤", callback_data="travel_time_1")],
            [
                InlineKeyboardButton(
                    "–†–∞–¥–∏ –ª—É—á—à–µ–≥–æ –æ—Ç–ø—É—Å–∫–∞ –≥–æ—Ç–æ–≤ –Ω–∞ –≤—Å–µ!", callback_data="travel_time_2"
                )
            ],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")],
        ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await send_message_or_reply(
        update,
        context,
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø—É—Ç–∏ –∫ –æ—Ç–¥—ã—Ö—É –º–µ—á—Ç—ã:",
        reply_markup=reply_markup,
    )
    context.user_data.setdefault("history", []).append("direction_travel_time")


async def ask_direction_preferences(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_message_or_reply(
        update,
        context,
        "–û—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è (–ø–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—é, –ø–∏—Ç–∞–Ω–∏—é, –≤–∏–¥—É –∏–∑ –Ω–æ–º–µ—Ä–∞ –∏ —Ç.–¥.):",
    )
    context.user_data.setdefault("history", []).append("direction_preferences")


async def ask_direction_extreme(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üö∂ –ü—Ä–æ–≥—É–ª–∫–∏", callback_data="extreme_0")],
        [InlineKeyboardButton("üó∫Ô∏è –≠–∫—Å–∫—É—Ä—Å–∏–∏", callback_data="extreme_1")],
        [InlineKeyboardButton("ü™¢ –í–æ—Å—Ö–æ–∂–¥–µ–Ω–∏—è", callback_data="extreme_2")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await send_message_or_reply(
        update,
        context,
        "–í—ã –≤—ã–±—Ä–∞–ª–∏: üèîÔ∏è –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –≤ –≥–æ—Ä–∞—Ö\n\nüßó –ö–∞–∫–æ–π —É—Ä–æ–≤–µ–Ω—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π –ø–æ –¥—É—à–µ?",
        reply_markup=reply_markup,
    )
    context.user_data.setdefault("history", []).append("direction_extreme")


async def ask_direction_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üá∑üá∫ –†–æ—Å—Å–∏—è", callback_data="type_0")],
        [InlineKeyboardButton("üåè –ó–∞—Ä—É–±–µ–∂–Ω—ã–π —Ç—É—Ä", callback_data="type_1")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await send_message_or_reply(
        update,
        context,
        "üó∫Ô∏è –ö—É–¥–∞ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è?\nüß≠ –í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä:",
        reply_markup=reply_markup,
    )
    context.user_data.setdefault("history", []).append("direction_type")


async def show_faq_options(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üíº –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã", callback_data="faq_0")],
        [
            InlineKeyboardButton(
                "üìÖ –ö–æ–≥–¥–∞ –∏ –∫–∞–∫ —è –ø–æ–ª—É—á—É –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ —Ç—É—Ä", callback_data="faq_1"
            )
        ],
        [
            InlineKeyboardButton(
                "üí∞ –í–æ–∑–º–æ–∂–Ω–æ –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã —Ç—É—Ä–∞", callback_data="faq_2"
            )
        ],
        [InlineKeyboardButton("üìù –ú–æ–≥—É –ª–∏ —è –æ—Ç–º–µ–Ω–∏—Ç—å —Ç—É—Ä", callback_data="faq_3")],
        [InlineKeyboardButton("üîí –ó–∞—â–∏—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", callback_data="faq_4")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await send_message_or_reply(
        update,
        context,
        "‚ÑπÔ∏è  –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è? ü§î\nüí°–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–æ–ø—Ä–æ—Å–æ–≤:",
        reply_markup=reply_markup,
    )


async def process_contact_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["contact_name"] = update.message.text
    await ask_contact_info(update, context)


async def process_contact_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    phone_number = find_phone_number(user_message)
    email = find_email(user_message)

    if phone_number:
        context.user_data["phone_number"] = phone_number

    if email:
        context.user_data["email"] = email

    if not phone_number and not email:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–æ–Ω—Ç–∞–∫—Ç: –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7 (XXX) XXX-XX-XX –∏–ª–∏ email –≤ —Ñ–æ—Ä–º–∞—Ç–µ example@mail.com."
        )
        return

    context.user_data["contact_info"] = update.message.text
    if context.user_data["current_form"] == 1:
        await send_application(update, context)
    elif context.user_data["current_form"] == 0:
        current_direction = context.user_data.get("direction_name")
        if (
            current_direction == DIRECTION_NAMES["5"]
            or current_direction == DIRECTION_NAMES["6"]
        ):
            await send_application(update, context)
        else:
            await ask_contact_method(update, context)


async def process_contact_method(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact_method = update.callback_query.data.split("_")[2]
    if contact_method == "0":
        context.user_data["contact_method"] = "Telegram"
    elif contact_method == "1":
        context.user_data["contact_method"] = "WhatsApp"
    elif contact_method == "2":
        context.user_data["contact_method"] = "VK"
    elif contact_method == "3":
        context.user_data["contact_method"] = "E-Mail"
    elif contact_method == "4":
        context.user_data["contact_method"] = "–õ—é–±–æ–π"

    if context.user_data["current_form"] == 1:
        await ask_contact_name(update, context)
    elif context.user_data["current_form"] == 0:
        current_direction = context.user_data.get("direction_name")
        if (
            current_direction == DIRECTION_NAMES["5"]
            or current_direction == DIRECTION_NAMES["6"]
        ):
            await ask_contact_name(update, context)
        else:
            await send_application(update, context)


async def process_visa_duration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["visa_duration"] = update.message.text
    await ask_contact_name(update, context)


async def process_direction_duration(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    duration = update.callback_query.data.split("_")[1]

    if duration == "0":
        context.user_data["direction_duration"] = "–¥–æ 3 –Ω–æ—á–µ–π"
    elif duration == "1":
        context.user_data["direction_duration"] = "–¥–æ 7 –Ω–æ—á–µ–π"
    elif duration == "2":
        context.user_data["direction_duration"] = "–¥–æ 10 –Ω–æ—á–µ–π"
    elif duration == "3":
        context.user_data["direction_duration"] = "–æ—Ç 10 –Ω–æ—á–µ–π"

    await ask_direction_participants(update, context)


async def process_direction_participants(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    participants = update.callback_query.data.split("_")[1]

    if participants == "0":
        context.user_data["direction_participants"] = "1-2 —á–µ–ª–æ–≤–µ–∫–∞"
    elif participants == "1":
        context.user_data["direction_participants"] = "–¥–æ 4 —á–µ–ª–æ–≤–µ–∫"
    elif participants == "2":
        context.user_data["direction_participants"] = "–æ—Ç 4 —á–µ–ª–æ–≤–µ–∫"

    await ask_direction_children(update, context)


async def process_direction_children(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    context.user_data["direction_children"] = update.message.text
    current_direction = context.user_data.get("direction_name")

    if (
        current_direction == DIRECTION_NAMES["0"]
        or current_direction == DIRECTION_NAMES["2"]
        or current_direction == DIRECTION_NAMES["3"]
        or current_direction == DIRECTION_NAMES["4"]
    ):
        await ask_direction_budget(update, context)
    elif current_direction == DIRECTION_NAMES["1"]:
        await ask_direction_preferences(update, context)


async def process_direction_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    budget = update.callback_query.data.split("_")[1]

    if budget == "0":
        context.user_data["direction_budget"] = "–¥–æ 100 000"
    elif budget == "1":
        context.user_data["direction_budget"] = "–¥–æ 200 000"
    elif budget == "2":
        context.user_data["direction_budget"] = "–¥–æ 400 000"
    elif budget == "3":
        context.user_data["direction_budget"] = "–æ—Ç 400 000"

    current_direction = context.user_data.get("direction_name")

    if (
        current_direction == DIRECTION_NAMES["0"]
        or current_direction == DIRECTION_NAMES["4"]
    ):
        await ask_direction_travel_time(update, context)
    elif current_direction == DIRECTION_NAMES["1"]:
        await ask_direction_preferences(update, context)
    elif current_direction == DIRECTION_NAMES["2"]:
        await ask_direction_preferences(update, context)
    elif current_direction == DIRECTION_NAMES["3"]:
        await ask_direction_travel_time(update, context)
    elif (
        current_direction == DIRECTION_NAMES["5"]
        or current_direction == DIRECTION_NAMES["6"]
    ):
        await ask_contact_name(update, context)


async def process_direction_travel_time(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    travel_time = update.callback_query.data.split("_")[2]
    if travel_time == "0":
        context.user_data["direction_travel_time"] = "–¥–æ 4 —á–∞—Å–æ–≤"
    elif travel_time == "1":
        context.user_data["direction_travel_time"] = "–¥–æ 9 —á–∞—Å–æ–≤"
    elif travel_time == "2":
        context.user_data[
            "direction_travel_time"
        ] = "–†–∞–¥–∏ –ª—É—á—à–µ–≥–æ –æ—Ç–ø—É—Å–∫–∞ –≥–æ—Ç–æ–≤ –Ω–∞ –≤—Å–µ!"
    await ask_direction_preferences(update, context)


async def process_direction_preferences(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    context.user_data["direction_preferences"] = update.message.text
    await ask_contact_name(update, context)


async def process_direction_extreme(update: Update, context: ContextTypes.DEFAULT_TYPE):
    extreme = update.callback_query.data.split("_")[1]
    if extreme == "0":
        context.user_data["direction_extreme"] = "–ø—Ä–æ–≥—É–ª–∫–∏"
    elif extreme == "1":
        context.user_data["direction_extreme"] = "—ç–∫—Å–∫—É—Ä—Å–∏–∏"
    elif extreme == "2":
        context.user_data["direction_extreme"] = "–≤–æ—Å—Ö–æ–∂–¥–µ–Ω–∏—è"

    await ask_direction_participants(update, context)


async def process_direction_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    direction_type = update.callback_query.data.split("_")[1]
    if direction_type == "0":
        context.user_data["direction_type"] = "–†–æ—Å—Å–∏—è"
    elif direction_type == "1":
        context.user_data["direction_type"] = "–ó–∞—Ä—É–±–µ–∂–Ω—ã–π —Ç—É—Ä"
    await ask_direction_travel_time(update, context)


# endregion

# region: sending a message to a group
async def send_application(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = (
        update.message.from_user if update.message else update.callback_query.from_user
    )
    user_profile_link = f"@{user.username}" if user.username else f"ID: {user.id}"

    current_form = context.user_data.get("current_form")

    contact_info = ""

    if context.user_data.get("phone_number"):
        contact_info += f"\n*Phone:* {context.user_data.get('phone_number')}"

    if context.user_data.get("email"):
        contact_info += f"\n*Email:* {context.user_data.get('email')}"

    if current_form == 1:
        visa_name = context.user_data.get("visa_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–∏–∑–∞")
        message_to_send = (
            f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–∏–∑—É *{visa_name}* –æ—Ç {user_profile_link}:\n"
            f"{contact_info}\n\n"
        )
        if context.user_data.get("contact_name"):
            message_to_send += f"*–ò–º—è:* {context.user_data.get('contact_name')}\n"
        # if context.user_data.get("contact_info"):
        # message_to_send +=  f"*–ö–æ–Ω—Ç–∞–∫—Ç:* {context.user_data.get('contact_info')}\n"
        if context.user_data.get("contact_method"):
            message_to_send += f"*–°–≤—è–∑—å:* {context.user_data.get('contact_method')}\n"
        if context.user_data.get("visa_duration"):
            message_to_send += f"*–°—Ä–æ–∫ –≤–∏–∑—ã:* {context.user_data.get('visa_duration')}"

    elif current_form == 0:
        direction_name = context.user_data.get(
            "direction_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"
        )
        message_to_send = (
            f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ *{direction_name}* –æ—Ç {user_profile_link}:\n"
            f"{contact_info}\n\n"
        )
        if context.user_data.get("contact_name"):
            message_to_send += f"*–ò–º—è:* {context.user_data.get('contact_name')}\n"
        if context.user_data.get("contact_method"):
            message_to_send += f"*–°–≤—è–∑—å:* {context.user_data.get('contact_method')}\n"
        if context.user_data.get("direction_duration"):
            message_to_send += (
                f"*–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* {context.user_data.get('direction_duration')}\n"
            )
        if context.user_data.get("direction_participants"):
            message_to_send += (
                f"*–£—á–∞—Å—Ç–Ω–∏–∫–∏:* {context.user_data.get('direction_participants')}\n"
            )
        if context.user_data.get("direction_children"):
            message_to_send += (
                f"*–î–µ—Ç–∏:* {context.user_data.get('direction_children')}\n"
            )
        if context.user_data.get("direction_budget"):
            message_to_send += (
                f"*–ë—é–¥–∂–µ—Ç:* {context.user_data.get('direction_budget')}\n"
            )
        if context.user_data.get("direction_travel_time"):
            message_to_send += (
                f"*–í—Ä–µ–º—è –≤ –ø—É—Ç–∏:* {context.user_data.get('direction_travel_time')}\n"
            )
        if context.user_data.get("direction_extreme"):
            message_to_send += (
                f"*–£—Ä–æ–≤–µ–Ω—å —ç–∫—Å—Ç—Ä–∏–º–∞:* {context.user_data.get('direction_extreme')}\n"
            )
        if context.user_data.get("direction_type"):
            message_to_send += (
                f"*–¢–∏–ø —Ç—É—Ä–∞:* {context.user_data.get('direction_type')}\n"
            )
        if context.user_data.get("direction_preferences"):
            message_to_send += (
                f"*–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:* {context.user_data.get('direction_preferences')}\n"
            )

    try:
        await context.bot.send_message(
            chat_id=TARGET_CHANNEL_ID, text=message_to_send, parse_mode="Markdown"
        )
        if update.callback_query:
            thank_you_messages = [
                "üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏! ‚ú®",
                "üöÄ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ú–µ–Ω–µ–¥–∂–µ—Ä —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∞—à–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ üó∫Ô∏è",
                "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É –Ω–∞—Å! –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –æ—Ç –Ω–∞—à–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ üìû",
                "–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ! –°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä! üòâ",
                "–ú—ã —Ü–µ–Ω–∏–º –≤–∞—à –∏–Ω—Ç–µ—Ä–µ—Å –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º! –û–∂–∏–¥–∞–π—Ç–µ –Ω–æ–≤–æ—Å—Ç–µ–π –æ—Ç –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã! üß≠",
            ]
            random_message = random.choice(thank_you_messages)
            await update.callback_query.edit_message_text(
                random_message, reply_markup=None
            )
        elif update.message:
            thank_you_messages = [
                "üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏! ‚ú®",
                "üöÄ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ú–µ–Ω–µ–¥–∂–µ—Ä —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∞—à–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ üó∫Ô∏è",
                "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É –Ω–∞—Å! –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –æ—Ç –Ω–∞—à–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ üìû",
                "–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ! –°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä! üòâ",
                "–ú—ã —Ü–µ–Ω–∏–º –≤–∞—à –∏–Ω—Ç–µ—Ä–µ—Å –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º! –û–∂–∏–¥–∞–π—Ç–µ –Ω–æ–≤–æ—Å—Ç–µ–π –æ—Ç –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã! üß≠",
            ]
            random_message = random.choice(thank_you_messages)
            await update.message.reply_text(random_message)

        await asyncio.sleep(6)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 1 —Å–µ–∫—É–Ω–¥—É
        await display_main_menu(update, context)

    except Exception as error:
        await send_message_or_reply(
            update,
            context,
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
        )
        print(f"Error sending message: {error}")
        return

    context.user_data.clear()


async def display_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton(
                "‚ú® –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –í–æ–ª—à–µ–±–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ", callback_data="form_0"
            )
        ],
        [InlineKeyboardButton("‚úàÔ∏è –í–∏–∑—ã - –û—Ç–∫—Ä–æ–π –º–∏—Ä!", callback_data="form_1")],
        [InlineKeyboardButton("‚ùì FAQ - –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã", callback_data="form_2")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = (
        "üåç MAWAY Travel ‚Äî –ü—Ä–∏–∫–æ—Å–Ω–∏—Å—å –∫ –º–µ—á—Ç–µ.\n"
        "        –û—Ç–∫—Ä–æ–π –º–∏—Ä –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã—Ö –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π! ‚úàÔ∏è"
    )

    if update.message:
        await update.message.reply_text(text, reply_markup=reply_markup)
    elif update.callback_query:
        try:
            await update.callback_query.edit_message_text(
                text, reply_markup=reply_markup
            )
        except telegram.error.BadRequest as e:
            if "Message to edit not found" in str(e):
                print("Message to edit not found, sending a new message.")
                await update.callback_query.message.reply_text(
                    text, reply_markup=reply_markup
                )
            elif "Query is too old" in str(e):
                print("Query is too old, ignoring.")
            else:
                print(f"An unexpected BadRequest error occurred: {e}")


# endregion

# region: Message handler
async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    current_form = context.user_data.get("current_form")
    form_step = context.user_data.get("form_step")
    if context.user_data.get("history"):
        form_step = context.user_data.get("history")[-1]
    else:
        form_step = None
    if current_form == 2:
        await send_message_or_reply(
            update, context, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–ø–æ–ª–Ω—è—Ç—å —Ñ–æ—Ä–º—É –≤ —Ä–∞–∑–¥–µ–ª–µ FAQ."
        )
        await display_main_menu(update, context)
        return

    if current_form is None:
        await send_message_or_reply(
            update, context, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
        )
        await display_main_menu(update, context)
        return

    if form_step == "contact_name":
        await process_contact_name(update, context)
    elif form_step == "contact_info":
        await process_contact_info(update, context)
    elif form_step == "contact_method":
        await process_contact_method(update, context)
    elif form_step == "visa_duration":
        await process_visa_duration(update, context)
    elif form_step == "direction_children":
        await process_direction_children(update, context)
    elif form_step == "direction_budget":
        await process_direction_budget(update, context)
    elif form_step == "direction_travel_time":
        await process_direction_travel_time(update, context)
    elif form_step == "direction_preferences":
        await process_direction_preferences(update, context)
    elif form_step == "direction_extreme":
        await process_direction_extreme(update, context)
    elif form_step == "direction_type":
        await process_direction_type(update, context)
    else:
        await send_message_or_reply(
            update, context, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞."
        )


# endregion

# --------------------
# --------------------

# region: updating subcategories
async def direction_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    direction = query.data.split("_")[1]
    direction_name = DIRECTION_NAMES.get(direction, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")

    context.user_data["direction_name"] = direction_name
    context.user_data["current_form"] = 0
    context.user_data["form_step"] = None

    if direction_name == DIRECTION_NAMES["1"]:
        await ask_direction_extreme(update, context)
    elif (
        direction_name == DIRECTION_NAMES["5"] or direction_name == DIRECTION_NAMES["6"]
    ):
        await ask_contact_method(update, context)
    else:
        await ask_direction_duration(update, context)


async def visa_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    visa = query.data.split("_")[1]
    visa_name = VISA_NAMES.get(visa, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–∏–∑–∞")

    context.user_data["visa_name"] = visa_name
    context.user_data["current_form"] = 1
    await ask_visa_duration(update, context)


# endregion

# --------------------
# --------------------

# region: answers to the faq
async def show_faq_options(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üíº –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã", callback_data="faq_0")],
        [
            InlineKeyboardButton(
                "üìÖ –ö–æ–≥–¥–∞ –∏ –∫–∞–∫ —è –ø–æ–ª—É—á—É –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ —Ç—É—Ä", callback_data="faq_1"
            )
        ],
        [
            InlineKeyboardButton(
                "üí∞ –í–æ–∑–º–æ–∂–Ω–æ –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã —Ç—É—Ä–∞", callback_data="faq_2"
            )
        ],
        [InlineKeyboardButton("üìù –ú–æ–≥—É –ª–∏ —è –æ—Ç–º–µ–Ω–∏—Ç—å —Ç—É—Ä", callback_data="faq_3")],
        [InlineKeyboardButton("üîí –ó–∞—â–∏—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", callback_data="faq_4")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await send_message_or_reply(
        update,
        context,
        "‚ÑπÔ∏è  –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è? ü§î\nüí°–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–æ–ø—Ä–æ—Å–æ–≤:",
        reply_markup=reply_markup,
    )


# endregion

# --------------------
# --------------------


async def back_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    history = context.user_data.get("history", [])
    if len(history) <= 1:
        await display_main_menu(update, context)
        return

    history.pop()
    previous_step_info = history[-1]
    context.user_data["history"] = history

    if isinstance(previous_step_info, int) and previous_step_info in [0, 1, 2]:
        await display_main_menu(update, context)
        return

    form_step = previous_step_info
    if form_step == "contact_name":
        await ask_contact_name(update, context)
    elif form_step == "contact_info":
        await ask_contact_info(update, context)
    elif form_step == "contact_method":
        if context.user_data.get("current_form") == 1:
            await show_visa_options(update, context)
        else:
            await ask_contact_method(update, context)
    elif form_step == "visa_duration":
        await ask_visa_duration(update, context)
    elif form_step == "direction_children":
        await ask_direction_children(update, context)
    elif form_step == "direction_budget":
        await ask_direction_budget(update, context)
    elif form_step == "direction_travel_time":
        await ask_direction_travel_time(update, context)
    elif form_step == "direction_preferences":
        await ask_direction_preferences(update, context)
    elif form_step == "direction_extreme":
        await ask_direction_extreme(update, context)
    elif form_step == "direction_type":
        await ask_direction_type(update, context)


# endregion


async def faq_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query

    try:
        await query.answer()
    except telegram.error.BadRequest as e:
        if "Query is too old" in str(e):
            print("Query is too old, ignoring.")
            return
        else:
            print(f"An unexpected BadRequest error occurred: {e}")

    faq_index = int(query.data.split("_")[1])
    faq_question = list(FAQ_RESPONSES.keys())[faq_index]
    faq_response = FAQ_RESPONSES[faq_question]

    keyboard = [
        [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤–æ–ø—Ä–æ—Å–∞–º FAQ", callback_data="form_2")],
        [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back")],
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    await send_message_or_reply(
        update, context, f"{faq_response}", reply_markup=reply_markup
    )


# --------------------
# --------------------

# region: callbacks
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await display_main_menu(update, context)


if __name__ == "__main__":
    application = Application.builder().token(TOKEN).build()

    # ---------------------

    application.add_handler(MessageHandler(filters.COMMAND, start))
    application.add_handler(CallbackQueryHandler(button_handler, pattern="^form_\\d$"))
    application.add_handler(
        CallbackQueryHandler(direction_handler, pattern="^direction_\\d$")
    )
    application.add_handler(CallbackQueryHandler(visa_handler, pattern="^visa_\\d$"))
    application.add_handler(CallbackQueryHandler(faq_handler, pattern="^faq_\\d$"))

    application.add_handler(CallbackQueryHandler(back_handler, pattern="^back$"))

    # ---------------------

    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler)
    )
    application.add_handler(
        CallbackQueryHandler(process_direction_duration, pattern="^duration_\\d$")
    )
    application.add_handler(
        CallbackQueryHandler(
            process_direction_participants, pattern="^participants_\\d$"
        )
    )
    application.add_handler(
        CallbackQueryHandler(process_direction_budget, pattern="^budget_\\d$")
    )
    application.add_handler(
        CallbackQueryHandler(process_direction_travel_time, pattern="^travel_time_\\d$")
    )
    application.add_handler(
        CallbackQueryHandler(process_direction_extreme, pattern="^extreme_\\d$")
    )
    application.add_handler(
        CallbackQueryHandler(process_contact_method, pattern="^contact_method_\\d$")
    )
    application.add_handler(
        CallbackQueryHandler(process_direction_type, pattern="^type_\\d$")
    )
    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler)
    )

    # ---------------------

    application.run_polling()
# endregion
